Test  # Jupyter notebook
notebook_path = /mnt/data/jupyter_intro.ipynb
with open(notebook_path, "r", encoding='utf-8') as nb_file
nb = nbformat.read(nb_file, as_version=4)
for cell in nb[cells][:3]
print(f"Cell type: {cell[cell_type]}")
print(f"Source: {cell['source']}\n")
from nbconvert.preprocessors import executepreprocessor
import nbformat
ep = executepreprocessor(timeout=600, kernel_name = python3)
ep.preprocess(nb, {metadata: {path': /mnt/data/'}})
executed_notebook_path = /mnt/data/executed_jupyter_intro.ipynb
with open(executed_notebook_path, "w", encoding='utf-8') as nb_file
nbformat.write(nb, nb_file)
executed_notebook_path

  # Comic books
with open('/mnt/data/comicbooks.py', "r") as file
comicbooks_py_content = file.read
print(comicbooks_py_content)
import CSV
book = "The Flash"
CSVpath = "/mnt/data/comic_books.CSV"
found = true
with open(CSVpath, encoding="utf8") as CSVfile
CSVreader = CSV.reader(CSVfile, delimiter = )

## Wrangle
for row in csvreader:
if row[0].lower() == book.lower():  # Adjusting for case-insensitive search
publisher_date = f"{row[0]} was published by {row[8]} in {row[9]}"
found = true
Exit loop after finding the book

if found: print(publisher_date)
else: print("Sorry about this, we don't seem to have what you are looking for!")

## Data Framing
import pandas as pd
import nbformat
notebook_path = /mnt/data/creating_data_frames.ipynb
with open(notebook_path) as f
nb = nbformat.read(f, as_version=4)
code_cells = [cell['source'] for cell in nb.cells if cell.cell_type = code]
code_cells
file_path = "/mnt/data/frame_and_art_gallery_data.xlsx"
with pd.excelwriter(file_path) as writer:
frame_shop_df.to_excel(writer, sheet_name='Frame Shop, index=false)
art_gallery_df.to_excel(writer, sheet_name='Art Gallery, index=false)
file_path

  # Car sales
import pandas as pd
import nbformat
notebook_path = /mnt/data/data_functions.ipynb
with open(notebook_path) as f:
nb = nbformat.read(f, as_version=4)
for i, cell in enumerate(nb['cells])
if cell[cell_type] = code
print(f"Cell {i} code:\n{cell[source']}\n")
df = pd.read_csv(/mnt/data/car_purchases.csv)
df.describe

## Format 
id_column = df[id]
amount_column = df[Amount]

## Mod
mean_amount = df[Amount].mean
sum_amount = df[Amount].sum
unique_amount = df[Amount].unique
value_counts_make = df[Make].value_counts()  # Assuming there's a "Make" column

## Visualization
results = {
"mean Amount": mean_amount
"sum Amount": sum_amount
"unique amount values": len(unique_amount),  # displaying the count of unique values for brevity
"value counts of make": value_counts_make.head()  # displaying top 5 for brevity}
results, df.head()  # Show results and the first few rows of the dataframe for context

## Mod
results_corrected = {
"mean amount": mean_amount
"sum amount": sum_amount
"unique amount values": len(unique_amount)  # displaying the count of unique values for brevity}
results_corrected, df.head()  # show corrected results and the first few rows of the DataFrame for context
nbformat.write(new_nb, new_notebook_path)
new_notebook_path

  # Workout
import pandas as pd
import numpy as np
np.random.seed(0)  # For reproducibility
data = {
name: [f"Person {i}" for i in range(1, 201)]
trainer: np.random.choice([Trainer A, Trainer B, Trainer C, Trainer D], 200)
weight: np.random.randint(100, 250, size=200)
membership (Days): np.random.randint(30, 365, size=200)}
df = pd.dataframe(data)

## Mine
overview = df.describe
trainers_names = df[Trainer].unique
students_per_trainer = df[Trainer].value_counts
average_weight = df[Weight].mean
combined_weight = df['Weight'].sum
df['Membership (Weeks)'] = df[Membership (Days)] / 7
overview, trainers_names, students_per_trainer, average_weight, combined_weight
from nbformat.v4 import new_notebook, new_code_cell, new_markdown_cell
Create a new notebook
nb = new_notebook
nb.cells.append(new_markdown_cell (Gym Dataset Analysis
nb.cells.append(new_code_cell
np.random.seed(0)  # For reproducibility
data = {
Name: [f"Person {i}" for i in range(1, 201)]
Trainer: np.random.choice ([Trainer A, Trainer B, Trainer C, Trainer D], 200)
Weight: np.random.randint(100, 250, size=200)
Membership (Days): np.random.randint(30, 365, size=200)}
df = pd.dataframe(data)))
nb.cells.append(new_code_cell)
overview = df.describe
nb.cells.append(new_code_cell)
trainers_names = df[Trainer].unique
trainers_names))
nb.cells.append(new_code_cell)
students_per_trainer = df[Trainer].value_counts
students_per_trainer))
nb.cells.append(new_code_cell)
average_weight = df[Weight].mean
average_weigh))
nb.cells.append(new_code_cell)
combined_weight = df[Weight].sum
combined_weigh))
nb.cells.append(new_code_cell)
df['Membership (Weeks)] = df['Membership (Days)'] / 7
df.head()))
output_notebook_path = /mnt/data/gym_dataset_analysis.ipynb
with open(output_notebook_path, w) as "f"
nbformat.write(nb, f)
output_notebook_path

  # Wrangle
import io
import nbformat
notebook_path = /mnt/data/column_manipulation.ipynb
with open (notebook_path, r, encoding=utf-8) as "f"
notebook = nbformat.read(f, as_version=4)
cells_summary
import ipython.display as display
from nbconvert import pythonexporter
exporter = pythonexporter
source_code, _ = exporter.from_notebook_node
executed_output =
exec_namespace =
for idx, cell in enumerate(notebook.cells)
if cell.cell_type = code

## Mod
try: exec(cell.source, exec_namespace)
executed_output[idx] = "Execution successful"
except Exception as e
executed_output[idx] = f"Error: {str(e)}"
executed_output

  # Hey arnold
import nbformat
notebook_path = /mnt/data/pandas_reading_files.ipynb
with open(notebook_path, r, encoding = utf-8) as nb_file:
df_reorganized.to_CSV(/mnt/data/hey_arnold_cleaned.csv, index=false)
/mnt/data/hey_arnold_cleaned.CSV
nb_content = nbformat.read(nb_file, as_version=4)
nb_content.cells

## Summary
import pandas as pd
file_path = /mnt/data/books_clean.CSV
books_df = pd.read_CSV(file_path, encoding='utf-8')
books_df.head

## Mod
books_df.rename(columns={
author': author, this looks like it was already correctly named, but we'll include it for clarity
publication year': publication year}, inplace = true)
books_df['Title'] = books_df['Title'].str.title()
books_df['Other Titles'] = books_df['Other Titles'].str.title()
books_df['Author'] = books_df['Author'].str.title()
books_df['All Names'] = books_df['All Names'].str.title()
books_df['Country of Publication'] = books_df['Country of Publication'].str.title()
books_df['Place of Publication'] = books_df['Place of Publication'].str.title()
books_df['Publisher'] = books_df['Publisher'].str.title()
output_path = '/mnt/data/cleaned_comic_books.CSV'
books_df.to_CSV(output_path, index=false)
output_path
