  # YouTube
import json
json_file_path = /mnt/data/video_api_response.json
with open(json_file_path, r) as file:
json_data = json.load(file)

## Wrangle
video_title = json_data[items][0][snippet][title]
video_rating = json_data[items][0][contentDetails][rating]
first_tag_link = f"https://www.youtube.com/hashtag/{json_data[items][0][snippet][tags][0].lower()}"
video_views = json_data[items][0][statistics][viewCount]
video_title, video_rating, first_tag_link, video_views

## Summary
video_title = json_data['data']['items'][0]['title']
video_rating = json_data['data']['items'][0]['rating']
first_tag = json_data['data']['items'][0]['tags'][0]  # Retrieve the first tag
first_tag_link = f"https://www.youtube.com/hashtag/{first_tag.lower()}"  # Generate the link for the first tag
video_views = json_data['data']['items'][0]['viewCount']
video_title, video_rating, first_tag_link, video_views

  # Visualization Complete

  # Habitat
import nbformat
notebook_path = /mnt/data/requests_review.ipynb
with open(notebook_path, r, encoding=utf-8) as nb_file:
notebook_content = nbformat.read(nb_file, as_version=4)
summary = {"total_cells": len(notebook_content[cells]),
"cell_types": [cell[cell_type] for cell in notebook_content[cells][:5]]}
summary, notebook_content[cells][0][source][:200], notebook_content[cells][-1][source][:200] 

## Mine
outputs = []
for cell in notebook_content[cells]:
if cell[cell_type] = code:
try:
exec(cell[source])
except Exception as e:
outputs.append(f"Error executing cell: {str(e)}")
        
else
       
if outputs in cell and cell[outputs]:
for output in cell[outputs]:
if text in output:
outputs.append(output[text])
elif data in output and text/plain in output[data]:
outputs.append(output[data][text/plain])
outputs[:3], outputs[-3:]

  # Visualizaton Complete

  # Climate Change
import nbformat
config_path = /mnt/data/config.py
with open(config_path, r)as file:
config_contents = file.read()
config_contents

## Wrangle
notebook = nbformat.reads(notebook_contents, as_version=4)
code_cells_content = []
for cell in notebook.cells:
if cell.cell_type == code:
code_cells_content.append(cell.source)
code_cells_count = len(code_cells_content)
first_cell_preview = code_cells_content[0].split(\n)[:5] if code_cells_content else []
code_cells_count, first_cell_preview

  # Visualization Complete

  # Temperature
import nbformat
config_path = /mnt/data/config.py
with open(config_path, r) as file:
config_contents = file.read()
config_contents

## Format
notebook_path = /mnt/data/Burundi.ipynb
with open(notebook_path, r, encoding=utf-8) as nb_file:
nb_contents = nbformat.read(nb_file, as_version=4)
for cell in nb_contents.cells:
print(f"Cell {cell[cell_type]}:")
print(cell[source])
print("\n---\n")

## Wrangle
import requests
from config import api_key
url = "http://api.openweathermap.org/data/2.5/weather?"
city = "Bujumbura"
units = "metric"  # Use "metric" for Celsius, "imperial" for Fahrenheit
query_url = f"{url}appid={api_key}&q={city}&units={units}"

## Mine
weather_response = requests.get(query_url)
weather_json = weather_response.json()
temperature = weather_json[main][temp]
print(f"The temperature in Bujumbura is {temperature} C")
units_list = ["metric", "imperial"]
temperatures = []
for unit in units_list:
query_url = f"{url}appid={api_key}&q={city}&units={unit}"
weather_response = requests.get(query_url)
weather_json = weather_response.json()
temperature = weather_json[main][temp]
temperatures.append(temperature)
print(f"The temperature in Bujumbura is {temperatures[0]} C or {temperatures[1]} F")

  # Visualization Complete

  # Climate Change
api_key =
import pandas as pd
import numpy as np
import nbformat
config_path = /mnt/data/config.py
with open(config_path, r) as file:
config_content = file.read()
config_content

## Format
notebook_path = /mnt/data/open_weather_dataframe.ipynb
with open(notebook_path, r, encoding=utf-8) as nb_file:
 notebook = nbformat.read(nb_file, as_version=4)

## Mod
cell_contents = [cell[source] for cell in notebook.cells if cell[cell_type] = code]
cell_contents[:3]

## Mine
data = {
City: [New York, London, Paris, Tokyo, Sydney, Cairo, Mumbai],
Temperature: np.random.uniform(15, 30, 7),  

  ## Random temperatures between 15 and 30 degrees Celsius
Humidity: np.random.randint(40, 100, 7),  
  ## Random humidity values between 40% and 100%
Cloudiness: np.random.randint(0, 100, 7),  
  ## Random cloudiness values between 0% and 100%
Wind Speed: np.random.uniform(0.5, 7.5, 7)  
  ## Random wind speeds between 0.5 and 7.5 m/s}
weather_df = pd.DataFrame(data)
weather_df

  # Visualization Complete

  # TV Ratings
api_key = 
import nbformat
notebook_path = "/mnt/data/TV_ratings.ipynb"

## Format
with open(notebook_path, r, encoding=utf-8) as nb_file:
nb_contents = nbformat.read(nb_file, as_version=4)
cell_summary = {total_cells: len(nb_contents[cells]),
markdown_cells: sum(1 for cell in nb_contents[cells] if cell[cell_type] = markdown),
code_cells: sum(1 for cell in nb_contents[cells] if cell[cell_type] = code)}
cell_summary

## Mod
# Simulating API response data with mock ratings for the list of TV shows
tv_shows = ["Game of Thrones", "Stranger Things", "The Witcher", "Breaking Bad", "The Office"]
show_ratings = [8.8, 8.7, 8.2, 9.5, 8.9]  # Mock ratings
tv_ratings_df = pd.DataFrame({
"TV Show": tv_shows,
"Rating": show_ratings})
plt.figure(figsize=(10, 6))
plt.bar(tv_shows, show_ratings, color=skyblue)
plt.xlabel(TV Show)
plt.ylabel(Rating)
plt.title(Ratings of Popular TV Shows)
plt.xticks(rotation=45)
plt.show()

## Mine
code_summaries = [nb_contents[cells][i][source] for i in range(len(nb_contents[cells])) if nb_contents[cells][i][cell_type] = code]
code_summary = "\n\n---\n\n".join(code_summaries)
code_summary

  # Visualization Complete

  # Latitude
api_key = 
url = "http://api.openweathermap.org/data/2.5/weather?"
units = "metric"

  ## Wrangle
tv_shows = ["Game of Thrones", "Stranger Things", "The Witcher", "Breaking Bad", "The Office"]
show_ratings = [8.8, 8.7, 8.2, 9.5, 8.9]  # Mock ratings
tv_ratings_df = pd.DataFrame({
"TV Show": tv_shows,
"Rating": show_ratings})

## Mod
plt.figure(figsize=(10, 6))
plt.bar(tv_shows, show_ratings, color='skyblue')
plt.xlabel('TV Show')
plt.ylabel('Rating')
plt.title('Ratings of Popular TV Shows')
plt.xticks(rotation=45)
plt.show()

# Dependencies
import matplotlib.pyplot as plt
import requests
from scipy import stats
import pandas as pd


## Mine
cities = ["Paris", "London", "Oslo", "Beijing", "Mumbai", "Manila", "New York", "Seoul", "Nairobi", "Buenos Aires"]
lat = [48.8566, 51.5074, 59.9139, 39.9042, 19.0760, 14.5995, 40.7128, 37.5665, -1.286389, -34.603722]
temp = [11, 10, 8, 16, 27, 30, 15, 13, 25, 18]
weather_dict = {
"city": cities,
"lat": lat,
"temp": temp}
weather_data = pd.DataFrame(weather_dict)

## Mod
plt.scatter(weather_data[lat], weather_data[temp])
plt.xlabel(Latitude)
plt.ylabel(Temperature (Â°C))
plt.title(City Latitude vs. Temperature)
plt.grid(True)
plt.show()

  # Visualization Complete

  # Students
import nbformat

## Format
notebook_path = /mnt/data/exception_handling.ipynb
with open(notebook_path, r) as nb_file:
notebook = nbformat.read(nb_file, as_version=4)

## Wrangle
cell_contents = [cell[source] for cell in notebook.cells if cell[cell_type] = code]

# Displaying the first few cells to get a sense of the analysis tasks
cell_contents[:5]

## Mod
try: students = {# Name  : Age "James": 27, "Sarah": 19, "Jocelyn": 28}
print(students["Mary"])
except KeyError:
print("The key 'Mary' does not exist in the students dictionary.")
print("This line will now print.")

  # Visualization Complete

  # Error Log
try:
print("Infinity looks like + " + str(10 / 0) + ".")
except ZeroDivisionError as e:
print("Caught an exception:", e)
try: print("I think her name was + " + name + "?")
except NameError as e:
print("Caught an exception:", e)
try: print("Your name is a nonsense number. Look: " + int("Gabriel"))
except ValueError as e:
print("Caught an exception:", e)
print("You made it through the gauntlet--the message survived!")

  # Break

  # Star Wars
import nbformat
notebook_path = '/mnt/data/api_exceptions.ipynb'
with open(notebook_path, 'r', encoding='utf-8') as nb_file:
nb_content = nbformat.read(nb_file, as_version=4)

## Format
cells_info = [(idx, cell.cell_type) for idx, cell in enumerate(nb_content.cells)]
cells_info

## Mine
def summarize_cell_content(cell):
cell_content = cell[source]
cell_type = cell[cell_type]
if cell_type == code:
comments = [line for line in cell_content.split(\n) if line.strip().startswith(#)]
return \n.join(comments)
    
else
       
return cell_content[:100] + ... if len(cell_content) > 100 else cell_content
cell_summaries = [summarize_cell_content(cell) for cell in nb_content.cells]
cell_summaries

  # Visualization Complete

  # World Bank
import pandas as pd
import nbformat

## Mine
with open('/mnt/data/world_bank_api.ipynb', 'r') as notebook_file:
notebook = nbformat.read(notebook_file, as_version=4)
markdown_cells = [cell['source'] for cell in notebook.cells if cell['cell_type'] == 'markdown']
code_cells = [cell['source'] for cell in notebook.cells if cell['cell_type'] == 'code']
(markdown_cells[:2], code_cells[:2])  # Displaying the first two of each for initial insight

## Mod
simulated_api_response = [
{"id": "USA", "name": "United States", "region": {"value": "North America"}, "incomeLevel": {"value": "High income"}},
{"id": "GBR", "name": "United Kingdom", "region": {"value": "Europe & Central Asia"}, "incomeLevel": {"value": "High income"}},
{"id": "IND", "name": "India", "region": {"value": "South Asia"}, "incomeLevel": {"value": "Lower middle income"}},
{"id": "BRA", "name": "Brazil", "region": {"value": "Latin America & Caribbean"}, "incomeLevel": {"value": "Upper middle income"}},
{"id": "KEN", "name": "Kenya", "region": {"value": "Sub-Saharan Africa"}, "incomeLevel": {"value": "Lower middle income"}},]
countries_df = pd.DataFrame(simulated_api_response)
countries_df[region] = countries_df[region].apply(lambda x: x[value])
countries_df[incomeLevel] = countries_df[incomeLevel].apply(lambda x: x[value])
countries_df

  # Visualization Complete

  # Species
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(style="ticks")
pairplot = sns.pairplot(iris_df, hue="species")
pairplot.fig.suptitle("Iris Species Comparison", y=1.02)

## Wrangle
iris = load_iris()
iris_df = pd.DataFrame(iris.data, columns=iris.feature_names)
iris_df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)
iris_df.info(), iris_df.head()

## Mod
plt.show()
from sklearn.datasets import load_iris
import requests
lending_types_url = "http://api.worldbank.org/v2/lendingTypes?format=json"
lending_types_response = requests.get(lending_types_url)
lending_types_data = lending_types_response.json()
lending_types = [item['id'] for item in lending_types_data[1]]

## Mine
countries_count_by_lending_type = {}
for lending_type in lending_types:
countries_url = f"http://api.worldbank.org/v2/country?lendingType={lending_type}&format=json"
countries_response = requests.get(countries_url)
countries_data = countries_response.json()
countries_count = countries_data[0][total]
countries_count_by_lending_type[lending_type] = countries_count
for lending_type, count in countries_count_by_lending_type.items():
print(f"{lending_type}: {count} countries")

  # Visualization Complete
