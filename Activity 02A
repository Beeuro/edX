  # Hello world
Sub helloworld
Msgbox "Hello, World!", vbInformation, "Greeting"

  # End Sub

  # Book
Sub showpopups
first pop-up message
Msgbox "This is the first message.", vbInformation, "Message 1"
second pop-up message
Msgbox "Here comes the second message.", vbInformation, "Message 2"
third pop-up message
Msgbox "Finally, the third message appears.", vbInformation, "Message 3"

  # End Sub

  # Wrangle
## Format
Sub insertrow
ows("2:2").insert shift:=xldown, copyorigin:=xlformatfromleftorabove
Sub gotosheet2(
Sheets("Sheet2").select
Range("A1").select
Sub formatrange(
Range("A1:A10").font.bold = true

## Mine
Sub calculatecum(
Range("B1").value = application.worksheetfunction.sum(Range("A1:A10"))

## Visualization
Sub createbarchart(
Dim chartobj as chartobject
Set chartobj = activesheet.chartobjects.add(Left:=100, Width:=375, Top:=50, Height:=225)
chartobj.chart.setsourcedata source:=range("A1:B10")
 chartobj.chart.charttype = xlbarclustered

  # End Sub

  # Wrangle
Sub validatedata(
If isnumeric(Range("A1").Value) Then
Msgbox "Cell A1 contains a numeric value."

Else

Msgbox "Cell A1 does not contain a numeric value."

End if

## Integration
Sub sendemail
Dim outlookapp as object
Dim outlookmail as object
Set outlookapp = createobject("Outlook.Application")
Set outlookmail = outlookapp.CreateItem(0)
With outlookmail
to = "recipient@example.com"
subject = "Test Email"
body = "This is the body of the email."
send
End with
Sub openworkbook()
Workbooks.open "C:\path\to\your\file.xlsx"

  # End Sub

## Export
Sub exporttocsv
Range("A1:B10").copy
Workbooks.add
Activesheet.paste
Activeworkbook.saveas filename:="C:\Path\To\Your\File.CSV", fileformat:=xlCSV
Activeworkbook.close false

  # End Sub

  # Mod
## Prompts
Sub getuserinput
Dim userinput as string
userinput = inputbox("Enter your name:", "User Input")
Msgbox "Hello, " & userInput & "!"
Sub button1_click
Msgbox "You clicked button 1!"
Sub button2_click
Msgbox "You clicked button 2!"

  # End Sub

  # Format
## Cells and ranges
Range("A1").Select selects cell A1
Range("A1:B2").select selects a range from A1 to B2
With range("A1")
font.name = "Times New Roman"
font.size = 12
font.color = RGB (15, 82, 186) Sapphire Blue
interior.color = RGB (255, 212, 0) Cyber Yellow

## Read/write
Dim value As variant
value = range("A1").value reads the value from A1
Range("B1").value = value writes the value into B1

## Insert/delete
Cells(3, 2).insert shift:=xltoright 
inserts a new cell at B3, shifting existing cells to the right
Rows("4:4").delete

## Copy/paste
Range("A1").copy destination:=range("B1")

## Apply formula
Range("C1").formula = "=A1+B1"

## Sort/filter
With range("A1:B10")
Sort key1:=range("A1"), order1:=xlascending, header:=xlyes

## Conditional
With range("A1:A10").formatconditions.add(Type:=xlCellValue, Operator:=xlGreater, Formula1:="5")
font.color = RGB(255, 0, 0) hange font color to red if value > 5
End with

## Merge
Range("A1:B1").merge

## Table
Activesheet.listobjects.add(xlsrcrange, range("A1:B10"), , xlyes).name = "MyTable"

  # Chess
Sub setupchessboard
define the chess pieces
Dim toprow as variant, secondrow as string
toprow = array("Rook", "Knight", "Bishop", "Queen", "King", "Bishop", "Knight", "Rook")
secondRow = "Pawn"

## Format
using ranges for the first two rows
With sheet1
range("A1:H1").value = toprow
range("A2:H2").value = secondrow
using cells for the last two rows
Dim i As Integer
For i = 1 To 8
With sheet1
Cells(8, i).Value = secondrow
Cells(9, i).Value = toprow(i - 1)
Next i
    
  # End Sub

  # Wrangle
## Data cleaning
Sub removeduplicates
Dim ws as worksheet
Set ws = activesheet modify as needed
ws.usedrange.removeduplicates columns:=array(1, 2), header:=xlyes specify columns

## Mine
Sub salculatestatistics
Dim rng As range
Set rng = selection Or specify a range like worksheets("Sheet1").range("A1:A10")
Msgbox "mean: " & application.worksheetfunction.average(rng) & vbcrlf
"standard deviation: " application.worksheetF\function.stdev(rng)
Sub mergecolumns
Dim ws as worksheet
Set ws = activesheet modify as needed
Dim lastrow As long
lastrow = ws.cells(ws.rows.count, "A").end(xlup).row assuming column a and b
Dim i As long
For i = 1 To lastrow
ws.cells(i, "C").value = ws.cells(i, "A").value & ws.cells(i, "B").value ' output in column c
Next i

  # End Sub

  # Visualization
Sub createchart
Dim rng as range
Set rng = selection or specify a range
Charts.add
Activechart.setsourcedata source:=rng

## Innovation
Sub formatcells
With selection
.Font.name = "Time New Roman"
.Font.Size = 12
.Interior.color = RGB(0, 0, 0) ' Black fill
.Borders(xledgebottom).linestyle = xlcontinuous
    
  # End Sub

## Regression
Sub linearregression
Dim yrange as range
Dim xrange as range
Set yrange = selection assuming first column is x
Set xrange = selection.offset(0, 1) assuming second column is x
Dim ws As worksheet
Set ws = sheets.add
ws.cells(1, 1).formula = "= Linest(" & yRange.Address & "," & xRange.Address & ")

## Mine
Sub calculatetotal
declare variables
Dim price as double
Dim tax as double
Dim quantity as integer
Dim total as double
assign values from the spreadsheet to variables
assuming price is in A1, Tax in B1, Quantity in C1, and Total in D1
price = range("A1").value
tax = range("B1").value
quantity = range("C1").value
calculate the total
Total = (price * quantity) * (1 + tax)
Range("D1").value = total
Msgbox "Your total is $" & format(Total, "0.00")

  # End Sub 

  # Dataframe
## Array
Sub sumarray
Dim ws as worksheet
Set ws = thisworkbook.sheets("Sheet1") change "Sheet1" to the name of your sheet
Dim datarange As range
Set datarange = ws.range("A1:A10") change "A1:A10" to your data range
Dim dataarray as variant
dataarray = datarange.value
Dim sum As double
sum = 0    
Dim i as long
For i = lbound(dataArray, 1) To ubound(dataArray, 1)
sum = sum + dataarray(i, 1)
Next i    
ws.range("B1").value = sum output the sum to B1. change "B1" to your desired cell

## Split
Sub splittext
Dim ws as worksheet
Set ws = activesheet
Dim rng As range
Dim lastrow as long
lastrow = ws.cells(ws.Rows.Count, "A").end(xlup).row
Set rng = ws.range("A1:A" & lastRow) ' assuming the text to split is in Column A
rng.texttocolumns destination:=range("B1"), dataT]type:=xldelimited,
Textqualifier:=xldoublequote, consecutivedelimiter: = false,
Tab: = false, semicolon = false, comma = true, space = false,
Other:=false

  # End Sub

  # Format
## Rows
Sub dividerowstosheets
Dim wssource as worksheet
Set wssource = activeSheet ' The sheet with data to split
Dim lastrow as long
lastrow = wssource.cells(wsSource.Rows.Count, "A").end(xlUp).row Assuming column A has the values to check
Dim cell as range
Dim wstarget As worksheet
On error resume next if sheet doesn't exist, create it
Set wstarget = worksheets(cell.value)
If wstarget is nothing then
Set wstarget = worksheets.add(After:=Worksheets(Worksheets.Count)
wstarget.name = cell.value

End if
On error goto 0
cell.entirerow.copy destination:=wstarget.range("A" & wsTarget.Cells(wsTarget.Rows.Count, "A").End(xlUp).Row + 1)
Next cell

## Book
Sub formatandsum
Dim ws as worksheet
Set ws = activesheet
Dim lastrow as long
lastrow = ws.cells(ws.Rows.Count, "B").end(xlUp).row ' assuming the numeric column to format and sum is B
    
Format column B as currency
ws.range("B1:B" & lastRow).numberformat = "$,0.00"
    
Sum values in column B and place the result in the next available row
ws.range("B" & lastRow + 1).value = application.worksheetfunction.sum(ws.range("B1:B" & lastrow))
ws.Range("B" & lastRow + 1).font.bold = true

## Mod
Sub findnthword
Dim sentence as string
Dim wordnumbers as variant
Dim words as variant
Dim i as integer
retrieve the user sentence and store it in a variable
sentence = range("A1").value Assuming the sentence is in cell A1
retrieve the user word numbers and store them in an array
assuming word numbers start from cell B1 and go downwards
adjust the range according to your needs
wordnumbers = range("B1:B5").value
split the user sentence into separate words
words = split(sentence, " ")
use the word numbers to retrieve specific words in the sentence
For i = 1 To ubound(wordnumbers)
check if the word number is within the bounds of the words array
If wordnumbers(i, 1) > 0 And wordnumbers(i, 1) <= ubound(words) + 1 then
output the n-th word in column C
cells(i, 3).value = words(wordnumbers(i, 1) - 1)

Else

cells(i, 3).value = "N/A" If the word number is out of bounds

End if
Next i

## Conditionals
Sub readandwritedata
reading a value from A1 and writing to B1Dim readvalue as variant
readvalue = thisworkbook.sheets("Sheet1").range("A1").value
Thisworkbook.sheets("Sheet1").range("B1").value = readvalue * 2 example operation

## Logic
Sub conditionallogic
Dim value as integer
value = thisworkbook.sheets("Sheet1").range("A1").value
If value > 10 then
Msgbox "value is greater than 10"

Else

Msgbox "value is 10 or less"

## Innovation
Function multiplyvalues(value1 As Double, value2 As Double) As double
multiplyvalues = value1 * value2

  # End Sub

  # Data visualization
## Chart
Sub createchart
Dim chart as chart
Set chart = thisworkbook.sheets("Sheet1").shapes.addchart2(, xlLine).chart
chart.setsourcedata source:=thisworkbook.sheets("Sheet1").range("A1:B10")

## Format
Sub sortdata
With thisworkbook.sheets("Sheet1").sort
sortfields.clear
sortfields.add key:=range("A1:A10"), sorton:=xlsortonvalues, order:=xlascending
setRange range("A1:A10")
header = xlno
apply

## Mine
Sub usesolver
Ensure solver add-in is enabled first
Solverreset
Solverok setcell:="$B$2", maxminval:=1, valueof:=0, bychange:="$A$2"
Solveradd cellref:="$A$2", relation:=1, formulatext:="100"
Solveradd cellref:="$A$2", relation:=3, formulatext:="1"
Solversolve userfinish:=true

## Integration
Sub sendemailviaoutlook
Dim outlookapp as object
Dim outlookmail as object
Set outlookapp = createobject("Outlook.Application")
Set outlookmail = outlookapp.createitem(0)
With outlookmail
to = "recipient@example.com"
subject = "this is the subject"
body = "this is the body of the email"
add more properties here as needed
send

## Debug
Sub errorhandlingadvanced
On error goto errorhandler
code that might cause an error goes here
Err.raise number:=vbobjecterror + 513, description:="Custom Error"
Exithere
Errorhandler
Msgbox "error " & err.number & ": " & err.description
Resume exithere

## Customization
Function calculatecompoundinterest(principal As double, rate as double, periods As integer) As double
Calculatecompoundinterest = principal * (1 + rate) periods

## Story
Sub adventurechoice
Dim userchoice As integerDim msg as string
On error resume next prevents error if non-numeric value is entered
userchoice = cint(Range("A1").value)
On error goto 0 turns back on regular error handling

Select case userchoice
Case 1: msg = "You choose to enter the wooded forest of doom!"
Case 2: msg = "You choose to enter the fiery volcano of doom!"
Case 3: msg = "You choose to enter the terrifying jungle of doom!"
Case 4: replace the message here with your custom message for option 4
msg = "You choose to embark on a mystical journey through the enchanted caves of doom!"
        
Case else
msg = "You decide to stay home instead."
End select
    
Msgbox msg

  # End Sub
