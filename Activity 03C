	# Cereal
import CSV
cereal_CSV_path = /mnt/data/cereal.CSV
with open(cereal_CSV_path, mode = "r") as file
CSV_reader = CSV.reader(file)
next(CSV_reader, None)
high_fiber_cereals = [row for row in CSV_reader if float(row[7]) >= 5]
cereal_bonus_CSV_path = /mnt/data/cereal_bonus.CSV
with open(cereal_bonus_CSV_path, mode='r') as file
CSV_reader = CSV.reader(file)
high_fiber_cereals_bonus = [row for row in CSV_reader if float(row[7]) >= 5]

	# Life
hobby_info = {
"name": "Matthew"
"age": 34
"hobbies": ["ice hockey", "music", "cooking"]
"wake_up_times": {"Monday": "5:00 AM", "Wednesday": "5:00 AM", "Friday": "5:00 AM"}}
print(f"Name: {hobby_info['name']}")
print(f"Number of hobbies: {len(hobby_info['hobbies'])}")
print(f"Typical wake-up time on Monday: {hobby_info['wake_up_times']['Monday']}")
with open("/mnt/data/comprehensions.py", "r") as file:
contents = file.read
user_provided_names = ["Matthew", "Alicia", "Ryan"]
lowercased_names = [name.lower() for name in user_provided_names]
titlecased_names = [name.title() for name in lowercased_names]
lowercased_names, titlecased_names

	# Mod
if numbers:  # check if the list is not empty
return sum(numbers) / len(numbers)
else: return 0  # return 0 or an appropriate value for an empty list
test_cases = [

[10, 20, 30, 40, 50],  # Simple case
[1.5, 2.5, 3.5],       # Floating point numbers
[-10, 0, 10, 20],      # Including negative numbers             

results = [average(case) for case in test_cases]
results
test_cases = [

[10, 20, 30, 40, 50],  # Simple case
[1.5, 2.5, 3.5],       # Floating point numbers
[-10, 0, 10, 20],      # Including negative numbers

results = [average(case) for case in test_cases]

	# University
import pandas as pd
with open("/mnt/data/graduation_functions.py", "r") as file
graduation_functions_code = file.read
graduation_functions_code
graduation_data_preview = pd.read_csv("/mnt/data/graduation_data.csv", nrows=5)
graduation_data_preview.head

## Wrangle
def print_percentages(state_data)
state_name = state_data[State or jurisdiction]
public_cohort = state_data[Adjusted cohort (Public)]
public_completers = state_data[Completers (Public)]
nonprofit_cohort = state_data[Adjusted cohort (Nonprofit Private)]
nonprofit_completers = state_data[Completers (Nonprofit Private)]
forprofit_cohort = state_data[Adjusted cohort (For-profit Private)]
forprofit_completers = state_data[Completers (For-profit Private)]
    
## Mod
public_rate = (public_completers / public_cohort * 100) if public_cohort > 0 else 0
nonprofit_rate = (nonprofit_completers / nonprofit_cohort * 100) if nonprofit_cohort > 0 else 0
forprofit_rate = (forprofit_completers / forprofit_cohort * 100) if forprofit_cohort > 0 else 0
total_cohort = public_cohort + nonprofit_cohort + forprofit_cohort
total_completers = public_completers + nonprofit_completers + forprofit_completers
overall_rate = (total_completers / total_cohort * 100) if total_cohort > 0 else 0
print(f"State: {state_name}")
print(f"Public school graduation rate: {public_rate:.2f}%")
if nonprofit_cohort > 0: # check if data for non-profit schools exists
print(f"Non-profit private school graduation rate: {nonprofit_rate:.2f}%")
if forprofit_cohort > 0: # check if data for for-profit schools exists
print(f"For-profit private school graduation rate: {forprofit_rate:.2f}%")
print(f"Overall graduation rate: {overall_rate:.2f}%")
if overall_rate > 50:
print("Approved")
    
else

print("Denied")

state_data_california = {
state or jurisdiction: California
adjusted cohort (Public)': 82721
completers (Public)': 53459
adjusted cohort (Nonprofit Private): 24037
completers (Nonprofit Private): 17350
adjusted cohort (For-profit Private): 12477
completers (For-profit Private): 5736}
print_percentages(state_data_california)

	#GitHub
## Clone
git clone your_repository_url
cd your_repository_name

## Book
mkdir new_folder
touch new_folder/new_file.txt

## Edit
git add
git commit -m "Added new lines, created a new folder, and added a new file"
git push

## Delete
rm -rf new_folder

## Addition
git add -a
git commit -m "Deleted the new folder"
git push
