	#Checkup
## Print hello user!
print("Hello User!")

## Take in user input
user_name = input("What is your name? ")

## Respond back with user input
print(f"Hello {user_name}")

## Take in the user favorite number
favorite_number = int(input("What is your favorite number? "))

## Define my favorite number for comparison
my_favorite_number = 7  # Example favorite number

## Respond back with a statement based on your favorite number
if favorite_number < my_favorite_number:
    print("Your favorite number is lower than mine.")
elif favorite_number > my_favorite_number:
    print("Your favorite number is higher than mine.")
else:
    print("Your favorite number is the same as mine!")

	#Candy store
## Print all candies
for index, candy in enumerate(candy_list):
    print(f"[{index}] {candy}")

## Allowance selection
for _ in range(allowance):
    selection = input("Enter the number of the candy you want: ")
    if selection.isdigit() and int(selection) < len(candy_list):
        candy_cart.append(candy_list[int(selection)])
    else:
        print("Please enter a valid number.")

## Print selected candies
print("You selected:")
for candy in candy_cart:
    print(candy)

## Unlimited selection
while true:
    selection = input("Enter the number of the candy you want (or 'done' to finish): ")
    if selection.lower() == 'done':
        break
    elif selection.isdigit() and int(selection) < len(candy_list):
        candy_cart.append(candy_list[int(selection)])
    else:
        print("Please enter a valid number or 'done' to finish.")

print("You selected:")
for candy in candy_cart:
    print(candy)

	#Pie order
def pie_order_form():
    # List of pies
    pies = ["Pecan", "Apple Crisp", "Bean", "Banoffee", "Black Bun", "Blueberry", "Buko", "Burek", "Tamale", "Steak"]
    # Initialize a list to keep track of pie orders
    pie_orders = [0] * len(pies)

    print("Welcome to the House of Pies! Here are our pies:\n")
    print("---------------------------------------------------------------------")
    # Display the pies
    for i, pie in enumerate(pies, start=1):
        print(f"({i}) {pie}", end=", " if i < len(pies) else "\n")
    
    while true:
        # Prompt the user to enter the number for the pie they would like to order
        try:
            pie_choice = int(input("Enter the number for the pie you would like to order: ")) - 1
            if pie_choice >= 0 and pie_choice < len(pies):
                # Increase the count for the selected pie
                pie_orders[pie_choice] += 1
                print(f"Great! We'll have that {pies[pie_choice]} right out for you.")
            else:
                print("Please enter a valid pie number.")
                continue
        except valueerror:
            print("Please enter a number.")
            continue

        # Check if the user wants to make another order
        another_order = input("Would you like to make another order? (yes/no): ").lower()
        if another_order != "yes":
            break

    ## Print the total number of pies ordered
    total_pies = sum(pie_orders)
    print(f"\nYou purchased {total_pies} pie(s) in total.\n")

    ## Bonus: Print the total pie count broken by each pie
    if total_pies > 0:
        print("You purchased:")
        for i, pie in enumerate(pies):
            print(f"{pie_orders[i]} {pie}")

## Call the function to start the order form
pie_order_form()

	#Input
from collections import counter

## Splitting the content into lines and words for analysis
lines = entire_content.split('\n')
words = entire_content.split()

## Count the number of lines
num_lines = len(lines)

## Search for specific keywords or phrases (example: "line")
keyword = "line"
num_keyword_occurrences = entire_content.count(keyword)

## Analyze the frequency of each word
word_frequency = counter(words)

## Extract specific information (example: words starting with "T" or "t")
words_starting_with_t = [word for word in words if word.lower().startswith('t')]

(num_lines, num_keyword_occurrences, word_frequency, words_starting_with_t)

	#Python builds
import random

## Generate a random integer between 1 and 10
random_int = random.randint(1, 10)
print(random_int)

## Choose a random element from a list
random_element = random.choice(['apple', 'banana', 'cherry'])
print(random_element)

## Get the current date and time
now = datetime.now()
print(now)

## Format a date
formatted_date = now.strftime("%Y-%m-%d %H:%M:%S")
print(formatted_date)

import os

## Get the current working directory
cwd = os.getcwd()
print(cwd)

## List files and directories in the current directory
entries = os.listdir('.')
print(entries)

import JSON

## Convert a Python object to a JSON string
python_dict = {"name": "John", "age": 30, "city": "New York"}
JSON_string = JSON.dumps(python_dict)
print(JSON_string)

## Convert a JSON string back to a Python object
python_obj = json.loads(json_string)
print(python_obj)

	#Comic book search
## Checking the column names of the CSV file
column_names = comic_books_df.columns.tolist()
column_names

	#CSV
## To execute the suggested actions, we'll approach each one step by step

## Validating the data
## We'll define a simple validation for the SSN format (assuming U.S. SSN format "XXX-XX-XXXX")
def validate_ssn(ssn):
    import re
    pattern = r'^\d{3}-\d{2}-\d{4}$'
    return bool(re.match(pattern, ssn))

## Apply SSN validation to the 'SSN' column
data['SSN_Valid'] = data['SSN'].apply(validate_ssn)

## Securing the data
## For demonstration purposes, we'll hash the SSN to "secure" it, though in practice, more comprehensive measures would be needed.
import hashlib
def hash_ssn(ssn):
    return hashlib.sha256(ssn.encode()).hexdigest()

data['SSN_Hash'] = data['SSN'].apply(hash_ssn)

## Analyzing the data
## As we have a limited dataset in this example, analysis might be minimal. However, let's calculate some basic statistics
analysis_results = {
    'Total Entries': data.shape[0],
    'Unique First Names': data['First Name'].nunique(),
    'Unique Last Names': data['Last Name'].nunique(),
    'Valid SSNs': data['SSN_Valid'].sum()
}

## Processing for a specific task
## Without a specific task mentioned, we'll prepare a simple summary of the dataset
summary = data[['First Name', 'Last Name', 'SSN_Valid']].describe()

(analysis_results, summary)

	#Census
## Raw 
Let's first read the content of the provided CSV file to understand its structure
file_path = '/mnt/data/census_starter.csv'

## Open the file and read the first few lines to understand its structure
with open(file_path, 'r', encoding='utf8') as file:
    lines = [next(file) for _ in range(5)]

lines

## Clean
import CSV

## Initialize lists to store the data for each required column
places = []
populations = []
per_capita_incomes = []
poverty_counts = []
poverty_rates = []

## Read the file and extract the necessary data
with open(file_path, 'r', encoding='utf8') as CSVfile:
    CSVreader = CSV.reader(CSVfile)
    for row in CSVreader:
        ## Extracting required data
        place = row[0]
        population = int(row[1])
        per_capita_income = row[4]
        poverty_count = int(row[8])
        
        ## Calculating poverty rate
        poverty_rate = (poverty_count / population) * 100
        
        ## Parsing the place into county and state
        county, state = place.split(', ')
        
        ## Append data to lists
        places.append((county, state))
        populations.append(population)
        per_capita_incomes.append(per_capita_income)
        poverty_counts.append(poverty_count)
        poverty_rates.append(f"{poverty_rate:.2f}%")

## Zip the lists together into a single tuple for each row
zipped_data = list(zip(places, populations, per_capita_incomes, poverty_counts, poverty_rates))

## Define the path for the new CSV file
new_CSV_path = '/mnt/data/cleaned_census_data.CSV'

## Write the extracted data into a new CSV file
with open(new_csv_path, 'w', encoding='utf8', newline='') as new_file:
    CSVwriter = CSV.writer(new_file)
    ## Write the header
    CSVwriter.writerow(['County', 'State', 'Population', 'Per Capita Income', 'Poverty Count', 'Poverty Rate (%)'])
    ## Write the data
    for row in zipped_data:
        ## Flatten the tuple (which contains a tuple for county and state) before writing
        CSVwriter.writerow([*row[0], *row[1:]])

new_CSV_path