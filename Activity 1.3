  Student grade analysis
import pandas as pd

# Load the data from the uploaded Excel file
file_path = '/mnt/data/Student Grades.xlsx'
grades_df = pd.read_excel(file_path)

# Display the first few rows of the dataframe to understand its structure
grades_df.head()

import matplotlib.pyplot as plt

# Setting up the figure and axes for the bar graphs, one for each month
fig, axes = plt.subplots(3, 2, figsize=(15, 15))
months = grades_df.columns[1:]  # Excluding the first column which is student names

for i, month in enumerate(months):
    ax = axes[i//2, i%2]
    ax.bar(grades_df['Unnamed: 0'], grades_df[month], color='skyblue')
    ax.set_title(f'Grades for {month}')
    ax.set_xticklabels(grades_df['Unnamed: 0'], rotation=90)
    ax.set_ylabel('Grades')
    ax.set_ylim(0, 100)  # Assuming grades are out of 100

plt.tight_layout()
plt.show()

# Setting up the figure for the line graph
plt.figure(figsize=(10, 6))

# Plotting each student's grade over the months
for index, row in grades_df.iterrows():
    plt.plot(months, row[1:], label=row[0])

plt.title('Students Grades Over the Semester')
plt.xlabel('Month')
plt.ylabel('Grades')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=1, fontsize='small')
plt.grid(True)
plt.tight_layout()

plt.show()

# Example: Filtering the line graph for the student "Odelia Nelsen"
student_name = "Odelia Nelsen"
student_data = grades_df[grades_df['Unnamed: 0'] == student_name]

plt.figure(figsize=(10, 6))

# Plotting the selected student's grade over the months
plt.plot(months, student_data.iloc[0, 1:], marker='o', linestyle='-', linewidth=2)

plt.title(f'Grades Over the Semester - {student_name}')
plt.xlabel('Month')
plt.ylabel('Grades')
plt.grid(True)
plt.xticks(months)
plt.tight_layout()

plt.show()

  Real estate
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Define a function to create scatter plots with a regression line
def create_scatter_plot(df, x_col, y_col, x_label, y_label, title):
    plt.figure(figsize=(10, 6))
    sns.regplot(x=x_col, y=y_col, data=df, scatter_kws={'alpha':0.5}, line_kws={'color': 'red'})
    plt.title(title)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.grid(True)

# Create the first scatter plot: price vs. sqft_living
create_scatter_plot(df, 'sqft_living', 'price', 'Square Feet of the Home', 'Price of the Home', 'Home Price vs. Square Feet')

# Create the second scatter plot: price vs. bedrooms
create_scatter_plot(df, 'bedrooms', 'price', 'Number of Bedrooms', 'Price of the Home', 'Home Price vs. Number of Bedrooms')

# Create the third scatter plot: price vs. bathrooms
create_scatter_plot(df, 'bathrooms', 'price', 'Number of Bathrooms', 'Price of the Home', 'Home Price vs. Number of Bathrooms')

# Adjust the scatter plots to have matching value ranges on axes

def create_adjusted_scatter_plot(df, x_col, y_col, x_label, y_label, title, xlim, ylim):
    plt.figure(figsize=(10, 6))
    sns.regplot(x=x_col, y=y_col, data=df, scatter_kws={'alpha':0.5}, line_kws={'color': 'red'})
    plt.xlim(xlim)
    plt.ylim(ylim)
    plt.title(title)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.grid(True)

# Define the adjusted limits based on the above max and min values
price_range = (min_price, max_price)
sqft_living_range = (min_sqft_living, max_sqft_living)
bedrooms_range = (min_bedrooms, max_bedrooms)
bathrooms_range = (min_bathrooms, max_bathrooms)

# Adjusted scatter plot: price vs. sqft_living
create_adjusted_scatter_plot(df, 'sqft_living', 'price', 'Square Feet of the Home', 'Price of the Home', 'Adjusted: Home Price vs. Square Feet', sqft_living_range, price_range)

# Adjusted scatter plot: price vs. bedrooms
create_adjusted_scatter_plot(df, 'bedrooms', 'price', 'Number of Bedrooms', 'Price of the Home', 'Adjusted: Home Price vs. Number of Bedrooms', bedrooms_range, price_range)

# Adjusted scatter plot: price vs. bathrooms
create_adjusted_scatter_plot(df, 'bathrooms', 'price', 'Number of Bathrooms', 'Price of the Home', 'Adjusted: Home Price vs. Number of Bathrooms', bathrooms_range, price_range)

Data visualization complete

  Walrus Group
# Calculate descriptive statistics for numeric variables
descriptive_stats = data_preview.describe()

# Extract year range for time series analysis context
year_range = data_preview['Year'].min(), data_preview['Year'].max()

descriptive_stats, year_range

import matplotlib.pyplot as plt
import seaborn as sns

# Set the aesthetic style of the plots
sns.set_style("whitegrid")

# Time Series Analysis: Yearly Distribution of Group Sizes
plt.figure(figsize=(12, 6))
sns.boxplot(x='Year', y='GroupSize', data=data_preview)
plt.title('Yearly Distribution of Walrus Group Sizes')
plt.xlabel('Year')
plt.ylabel('Group Size')
plt.show()

# Histogram: distribution of group sizes
plt.figure(figsize=(12, 6))
sns.histplot(data_preview['GroupSize'].dropna(), bins=30, kde=True)
plt.title('Distribution of Walrus Group Sizes')
plt.xlabel('Group Size')
plt.ylabel('Frequency')
plt.show()

Data visualization complete

  Home sales
import pandas as pd

# Load the dataset to examine the available columns
df = pd.read_excel("/mnt/data/home_sales_filtered.xlsx")

# Display the first few rows of the dataset to understand its structure
df.head()

import matplotlib.pyplot as plt

# Filter for waterfront homes
waterfront_homes = df[df['waterfront'] == 1]

# Calculate age of the home
current_year = pd.to_datetime('now').year
waterfront_homes['age'] = current_year - waterfront_homes['date_built']

# Group by age of home to get average price
age_price_trend = waterfront_homes.groupby('age')['price'].mean().reset_index()

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(age_price_trend['age'], age_price_trend['price'], marker='o', linestyle='-', color='b')
plt.title('Price Trend of Waterfront Homes in St. Louis by Age of Home')
plt.xlabel('Age of Home (Years)')
plt.ylabel('Average Price ($)')
plt.grid(True)
plt.show()

Data visualization complete

  CDC
# Calculating mean, variance, and standard deviation for the overall death rate per 100,000 for each state
summary_stats = data_states.groupby("State")["Death Rate Per 100,000"].agg(['mean', 'var', 'std'])

# Determine the state with the greatest difference in death rate across its counties (highest variance)
highest_variance_state = summary_stats['var'].idxmax()

# Determine the state with the lowest variance in death rate and its death rate
lowest_variance_state = summary_stats['var'].idxmin()
lowest_variance_death_rate = summary_stats.loc[lowest_variance_state, 'mean']

summary_stats, highest_variance_state, lowest_variance_state, lowest_variance_death_rate

# Filter data for Oregon, where Gender is "Overall"
oregon_data = data_states[data_states["State"] == "OR"]

# Calculate the mean and std for Oregon to use in z-score calculation
oregon_mean = oregon_data["Death Rate Per 100,000"].mean()
oregon_std = oregon_data["Death Rate Per 100,000"].std()

# Calculate z-scores for Oregon counties
oregon_data["Z-Score"] = (oregon_data["Death Rate Per 100,000"] - oregon_mean) / oregon_std

# Find the county with the largest difference in death rate from the state mean
max_z_score_county = oregon_data.loc[oregon_data["Z-Score"].abs().idxmax()]

oregon_data[["LocationDesc", "Death Rate Per 100,000", "Z-Score"]], max_z_score_county["LocationDesc"], max_z_score_county["Z-Score"]

  Antioxidants
# Calculate the required summary statistics for 'rating'
summary_stats = {
    'Mean': cereal_data['rating'].mean(),
    'Median': cereal_data['rating'].median(),
    'Minimum': cereal_data['rating'].min(),
    'Maximum': cereal_data['rating'].max(),
    'First Quartile': cereal_data['rating'].quantile(0.25),
    'Third Quartile': cereal_data['rating'].quantile(0.75)
}

summary_stats['Interquartile Range'] = summary_stats['Third Quartile'] - summary_stats['First Quartile']

# Determine the lower and upper boundaries for outliers using the 1.5*IQR rule
lower_boundary = summary_stats['First Quartile'] - 1.5 * summary_stats['Interquartile Range']
upper_boundary = summary_stats['Third Quartile'] + 1.5 * summary_stats['Interquartile Range']

summary_stats['Lower Boundary'] = lower_boundary
summary_stats['Upper Boundary'] = upper_boundary

summary_stats

# Identify outliers based on the 1.5*IQR rule
outliers = cereal_data[(cereal_data['rating'] < lower_boundary) | (cereal_data['rating'] > upper_boundary)]
outlier_products = outliers[['name', 'rating']].reset_index(drop=True)

outlier_products

import matplotlib.pyplot as plt
import seaborn as sns

# Create a box plot of the 'rating' for all products
plt.figure(figsize=(10, 6))
sns.boxplot(y=cereal_data['rating'])
plt.title('Box Plot of Cereal Ratings')
plt.ylabel('Rating')
plt.show()

Data visualization complete